import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

class Main {
    int maxValue;

    public int maxPathSum(TreeNode root) {
        maxValue = Integer.MIN_VALUE;
        maxPathDown(root);
        return maxValue;
    }

    private int maxPathDown(TreeNode node) {
        if (node == null) return 0;
        int left = Math.max(0, maxPathDown(node.left));
        int right = Math.max(0, maxPathDown(node.right));
        maxValue = Math.max(maxValue, left + right + node.val);
        return Math.max(left, right) + node.val;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the values for the tree nodes in level order (use 'null' for empty nodes):");
        
        String input = scanner.nextLine();
        String[] nodeValues = input.split(" ");
        TreeNode root = createTree(nodeValues);

        Main solution = new Main();
        int maxPathSum = solution.maxPathSum(root);

        System.out.println("Maximum Path Sum: " + maxPathSum);

        scanner.close();
    }

    private static TreeNode createTree(String[] nodeValues) {
        if (nodeValues.length == 0 || nodeValues[0].equals("null")) {
            return null;
        }

        TreeNode root = new TreeNode(Integer.parseInt(nodeValues[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        int i = 1;
        while (!queue.isEmpty() && i < nodeValues.length) {
            TreeNode current = queue.poll();

            if (i < nodeValues.length && !nodeValues[i].equals("null")) {
                current.left = new TreeNode(Integer.parseInt(nodeValues[i]));
                queue.add(current.left);
            }
            i++;

            if (i < nodeValues.length && !nodeValues[i].equals("null")) {
                current.right = new TreeNode(Integer.parseInt(nodeValues[i]));
                queue.add(current.right);
            }
            i++;
        }

        return root;
    }
}
